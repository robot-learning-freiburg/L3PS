# pytorch_lightning==1.8.6
seed_everything: 0

trainer:
  max_epochs: 150
  accelerator: gpu
  strategy: ddp_find_unused_parameters_false
  sync_batchnorm: True
  logger: False
  callbacks:
    - class_path: pytorch_lightning.callbacks.model_checkpoint.ModelCheckpoint
      init_args:
        dirpath: "checkpoints/nuimages_18_final_full/"
        filename: "semantic_nuimages"
        every_n_epochs: 10
        save_top_k: -1

model:
  dinov2_vit_model: "vitb14"
  num_classes: ${data.init_args.num_classes}
  output_size: ${data_params.image_size_original}
  upsample_factor: 14.0
  head: "mlp"
  ignore_index: 0
  top_k_percent_pixels: 0.2
  test_multi_scales: [1, 2, 3]
  test_plot: False
  # test_save_dir: null
  test_save_dir: "/home/canakcia/git/thesis/spino/panoptic_label_generator/test/nuimages_18"
  test_save_vis: True

data:
  class_path: datasets.nuimages.NuImagesDataModule
  init_args:
    cfg_dataset:
      version: "v1.0-train"
      dataroot: "/home/datasets/nuImages"
      image_size: ${data_params.image_size_original}
      verbose: false
      lazy: false
      n_thing_class: 10
      ann_root: "/home/canakcia/git/thesis/spino/panoptic_label_generator/nuim_anns"
    num_classes: 18
    batch_size: 1
    num_workers: 1
    transform_train:
      - class_path: utils.transforms.ToTensor
      - class_path: utils.transforms.RandomHorizontalFlip
      - class_path: utils.transforms.RandomResizedCrop
        init_args:
          size: ${data_params.image_size_input}
          scale: [0.2, 1.0]
      - class_path: utils.transforms.ColorJitter
        init_args:
          brightness: 0.2
          contrast: 0.2
          saturation: 0.2
          hue: 0.2
      - class_path: utils.transforms.MaskPostProcess
      - class_path: utils.transforms.ImageNormalize
        init_args:
          mean: ${data_params.image_mean}
          std: ${data_params.image_std}
    transform_test:
      - class_path: utils.transforms.ToTensor
      - class_path: utils.transforms.Resize
        init_args:
          size: ${data_params.image_size_input}
      - class_path: utils.transforms.MaskPostProcess
      - class_path: utils.transforms.ImageNormalize
        init_args:
          mean: ${data_params.image_mean}
          std: ${data_params.image_std}
    # This is critical, given the manual annotations. DO NOT CHANGE IT.
    train_sample_indices:
      [
        34,
        50,
        56,
        63,
        127,
        170,
        175,
        182,
        217,
        223,
        250,
        253,
        321,
        330,
        377,
        740,
        1510,
        1590,
        2171,
        2575,
        3006,
        3044,
        3056,
        3086,
        3110,
        3272,
        3432,
        3460,
        3592,
        3676,
      ]
    test_sample_indices: null
    # train_set: "train"
    # test_set: "test"

data_params:
  image_size_original: [900, 1600]
  # image_size_input: [252, 504]
  image_size_input: [896, 1596]
  image_mean: [0.485, 0.456, 0.406]
  image_std: [0.229, 0.224, 0.225]

ckpt_path: null

optimizer:
  class_path: torch.optim.Adam
  init_args:
    lr: 0.001

lr_scheduler:
  class_path: torch.optim.lr_scheduler.CosineAnnealingLR
  init_args:
    T_max: ${trainer.max_epochs}
